# Cài thư viện cần thiết (nếu chưa có)
!pip install scikit-learn pandas joblib

# Import
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
import joblib

# Tải dataset từ URL
url = "heart.csv"
df = pd.read_csv(url)

# Kiểm tra cấu trúc của dataset
print("📊 Thông tin về dataset:")
print("Kích thước:", df.shape)
print("\nTên các cột:")
print(df.columns.tolist())
print("\n5 dòng đầu tiên:")
print(df.head())

# Kiểm tra kiểu dữ liệu
print("\n📋 Kiểu dữ liệu của các cột:")
print(df.dtypes)

# Kiểm tra dữ liệu categorical
print("\n🔍 Kiểm tra dữ liệu categorical:")
for col in df.columns:
    if df[col].dtype == 'object':
        print(f"{col}: {df[col].unique()}")

# Kiểm tra tên cột target - thường là cột cuối cùng
target_column = df.columns[-1]  # Lấy cột cuối cùng
print(f"\n🎯 Cột target được xác định: '{target_column}'")

# Tạo bản sao để xử lý
df_processed = df.copy()

# Xử lý dữ liệu categorical bằng Label Encoding
label_encoders = {}
categorical_columns = []

for col in df_processed.columns:
    if df_processed[col].dtype == 'object':
        categorical_columns.append(col)
        le = LabelEncoder()
        df_processed[col] = le.fit_transform(df_processed[col])
        label_encoders[col] = le
        print(f"✅ Đã encode cột '{col}': {dict(zip(le.classes_, le.transform(le.classes_)))}")

print(f"\n📝 Các cột categorical đã được xử lý: {categorical_columns}")

# Tách biến đầu vào và đầu ra
X = df_processed.drop(target_column, axis=1)
y = df_processed[target_column]

print(f"\n📈 Kích thước dữ liệu sau khi xử lý:")
print(f"X (features): {X.shape}")
print(f"y (target): {y.shape}")
print(f"Phân bố target: \n{y.value_counts()}")

# Kiểm tra dữ liệu sau khi xử lý
print(f"\n🔍 Kiểm tra dữ liệu sau xử lý:")
print("Kiểu dữ liệu X:")
print(X.dtypes)
print("\n5 dòng đầu của X:")
print(X.head())

# Chia train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

print(f"\n📂 Chia dữ liệu:")
print(f"Training set: {X_train.shape[0]} samples")
print(f"Test set: {X_test.shape[0]} samples")

# Huấn luyện model
print("\n🤖 Đang huấn luyện model...")
model = RandomForestClassifier(
    n_estimators=100,
    random_state=42,
    max_depth=10
)
model.fit(X_train, y_train)

# Đánh giá model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f"\n📊 Kết quả đánh giá:")
print(f"Accuracy: {accuracy:.4f}")
print(f"\nClassification Report:")
print(classification_report(y_test, y_pred))

# Lưu model và các thông tin cần thiết
model_filename = "heart_disease_model.pkl"
joblib.dump(model, model_filename)

# Lưu thông tin về features và label encoders
feature_names = X.columns.tolist()
joblib.dump(feature_names, "feature_names.pkl")
joblib.dump(label_encoders, "label_encoders.pkl")

print(f"\n✅ Đã train và lưu model thành công!")
print(f"📁 Model được lưu tại: {model_filename}")
print(f"📁 Feature names được lưu tại: feature_names.pkl")
print(f"📁 Label encoders được lưu tại: label_encoders.pkl")

# Hiển thị độ quan trọng của các features
print(f"\n🔍 Độ quan trọng của các features:")
feature_importance = pd.DataFrame({
    'feature': feature_names,
    'importance': model.feature_importances_
}).sort_values('importance', ascending=False)

for idx, row in feature_importance.iterrows():
    print(f"{row['feature']}: {row['importance']:.4f}")

# Test thử model với một sample
print(f"\n🧪 Test model với một sample ngẫu nhiên:")
sample_idx = 0
sample_input = X_test.iloc[sample_idx:sample_idx+1]
prediction = model.predict(sample_input)[0]
actual = y_test.iloc[sample_idx]
probability = model.predict_proba(sample_input)[0]

print(f"Input features: {sample_input.values[0]}")
print(f"Prediction: {prediction} ({'Có bệnh tim' if prediction == 1 else 'Không bệnh tim'})")
print(f"Actual: {actual} ({'Có bệnh tim' if actual == 1 else 'Không bệnh tim'})")
print(f"Probability [Không bệnh, Có bệnh]: [{probability[0]:.4f}, {probability[1]:.4f}]")
print(f"Correct: {'✅' if prediction == actual else '❌'}")

print(f"\n🎉 Hoàn thành!")

# Tạo hàm để dự đoán với dữ liệu mới
def predict_heart_disease(age, sex, chest_pain_type, resting_bp, cholesterol,
                         fasting_bs, resting_ecg, max_hr, exercise_angina,
                         oldpeak, st_slope):
    """
    Hàm dự đoán bệnh tim với input mới

    Parameters:
    - age: tuổi
    - sex: giới tính ('M' hoặc 'F')
    - chest_pain_type: loại đau ngực ('ATA', 'NAP', 'ASY', 'TA')
    - resting_bp: huyết áp nghỉ
    - cholesterol: cholesterol
    - fasting_bs: đường huyết lúc đói (0 hoặc 1)
    - resting_ecg: ECG nghỉ ('Normal', 'ST', 'LVH')
    - max_hr: nhịp tim tối đa
    - exercise_angina: đau thắt ngực khi tập ('Y' hoặc 'N')
    - oldpeak: oldpeak
    - st_slope: độ dốc ST ('Up', 'Flat', 'Down')
    """

    # Tạo input DataFrame
    input_data = pd.DataFrame({
        'Age': [age],
        'Sex': [sex],
        'ChestPainType': [chest_pain_type],
        'RestingBP': [resting_bp],
        'Cholesterol': [cholesterol],
        'FastingBS': [fasting_bs],
        'RestingECG': [resting_ecg],
        'MaxHR': [max_hr],
        'ExerciseAngina': [exercise_angina],
        'Oldpeak': [oldpeak],
        'ST_Slope': [st_slope]
    })

    # Áp dụng label encoding cho các cột categorical
    for col in categorical_columns:
        if col in input_data.columns and col in label_encoders:
            try:
                input_data[col] = label_encoders[col].transform(input_data[col])
            except ValueError as e:
                print(f"Lỗi: Giá trị '{input_data[col].iloc[0]}' không có trong training data cho cột '{col}'")
                return None

    # Dự đoán
    prediction = model.predict(input_data)[0]
    probability = model.predict_proba(input_data)[0]

    result = {
        'prediction': prediction,
        'prediction_text': 'Có bệnh tim' if prediction == 1 else 'Không bệnh tim',
        'probability_no_disease': probability[0],
        'probability_disease': probability[1]
    }

    return result

print(f"\n📋 Hướng dẫn sử dụng hàm predict_heart_disease:")
print("Ví dụ: predict_heart_disease(40, 'M', 'ATA', 140, 289, 0, 'Normal', 172, 'N', 0, 'Up')")

# Test hàm predict
print(f"\n🧪 Test hàm predict với dữ liệu mẫu:")
test_result = predict_heart_disease(40, 'M', 'ATA', 140, 289, 0, 'Normal', 172, 'N', 0, 'Up')
if test_result:
    print(f"Kết quả dự đoán: {test_result}")