from flask import Flask, render_template, request
import joblib
import numpy as np
import os

app = Flask(__name__)

# Load model
try:
    model = joblib.load("diabetes_model.pkl")
    print("‚úÖ Model loaded successfully!")
    
    # Mapping t·ª´ t√™n field trong HTML sang t√™n chu·∫©n
    field_mapping = {
        'npreg': 'Pregnancies',
        'glu': 'Glucose', 
        'bp': 'BloodPressure',
        'skin': 'SkinThickness',
        'insu': 'Insulin',
        'bmi': 'BMI',
        'ped': 'DiabetesPedigreeFunction',
        'age': 'Age'
    }
    
    # Th·ª© t·ª± features cho model (theo th·ª© t·ª± training)
    feature_order = [
        'Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 
        'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'
    ]
    
    print(f"üìä Expected features: {feature_order}")
    
except Exception as e:
    print(f"‚ùå Error loading model: {e}")
    model = None
    field_mapping = {}
    feature_order = []

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/predict", methods=["POST"])
def predict():
    if model is None:
        return render_template("index.html", 
                             prediction_text="‚ùå Model ch∆∞a ƒë∆∞·ª£c load!")
    
    try:
        # Debug: In ra t·∫•t c·∫£ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
        print("üì• Form data received:")
        for key, value in request.form.items():
            print(f"  {key}: '{value}'")
        
        # L·∫•y v√† convert features theo ƒë√∫ng th·ª© t·ª±
        features = []
        for i, feature_name in enumerate(feature_order):
            value = request.form.get(feature_name, request.form.get(f'feature_{i}', ''))
            if value == '':
                value = 0  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu b·ªè tr·ªëng
            features.append(float(value))
        
        print(f"üî¢ Final features ({len(features)}): {features}")
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng features
        if len(features) != 8:
            raise ValueError(f"C·∫ßn 8 gi√° tr·ªã, nh·∫≠n ƒë∆∞·ª£c {len(features)}")
        
        # Validate ranges (optional)
        validations = [
            (features[0] >= 0, "S·ªë l·∫ßn mang thai ph·∫£i >= 0"),
            (features[1] > 0, "N·ªìng ƒë·ªô glucose ph·∫£i > 0"), 
            (features[2] > 0, "Huy·∫øt √°p ph·∫£i > 0"),
            (features[4] >= 0, "Insulin ph·∫£i >= 0"),
            (features[5] > 0, "BMI ph·∫£i > 0"),
            (features[6] >= 0, "Ch·ªâ s·ªë di truy·ªÅn ph·∫£i >= 0"),
            (features[7] > 0, "Tu·ªïi ph·∫£i > 0")
        ]
        
        for is_valid, error_msg in validations:
            if not is_valid:
                raise ValueError(error_msg)
        
        # T·∫°o array v√† predict
        data = np.array([features])
        print(f"üìä Input array shape: {data.shape}")
        
        prediction = model.predict(data)[0]
        probability = model.predict_proba(data)[0]
        
        print(f"üéØ Prediction: {prediction}")
        print(f"üìà Probability: {probability}")
        
        # Format k·∫øt qu·∫£ v·ªõi emoji v√† ph·∫ßn trƒÉm
        if prediction == 1:
            result = f"üö® C√≥ nguy c∆° m·∫Øc ti·ªÉu ƒë∆∞·ªùng (X√°c su·∫•t: {probability[1]:.1%})"
        else:
            result = f"‚úÖ Kh√¥ng c√≥ nguy c∆° ti·ªÉu ƒë∆∞·ªùng (X√°c su·∫•t kh·ªèe m·∫°nh: {probability[0]:.1%})"
        
        # Th√™m th√¥ng tin chi ti·∫øt
        result += f"\n\nüìä Chi ti·∫øt d·ª± ƒëo√°n:"
        result += f"\n‚Ä¢ X√°c su·∫•t kh√¥ng m·∫Øc: {probability[0]:.1%}"
        result += f"\n‚Ä¢ X√°c su·∫•t m·∫Øc b·ªánh: {probability[1]:.1%}"
        
        # Highlight c√°c y·∫øu t·ªë quan tr·ªçng n·∫øu c√≥ feature_importances_
        if hasattr(model, 'feature_importances_'):
            important_features = []
            for i, (name, value, importance) in enumerate(zip(feature_order, features, model.feature_importances_)):
                if importance > 0.1:  # Ch·ªâ hi·ªÉn th·ªã features quan tr·ªçng
                    important_features.append(f"‚Ä¢ {name}: {value} (t·∫ßm quan tr·ªçng: {importance:.1%})")
            
            if important_features:
                result += f"\n\nüîç C√°c y·∫øu t·ªë quan tr·ªçng:\n" + "\n".join(important_features[:3])
        
    except ValueError as ve:
        print(f"‚ùå ValueError: {ve}")
        result = f"‚ùå L·ªói d·ªØ li·ªáu: {str(ve)}"
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        print(f"‚ùå Error type: {type(e)}")
        import traceback
        traceback.print_exc()
        result = f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}"
    
    return render_template("index.html", prediction_text=result)

@app.route("/debug")
def debug():
    """Route ƒë·ªÉ debug th√¥ng tin model"""
    if model is None:
        return "‚ùå Model not loaded"
    
    info = {
        "Model type": type(model).__name__,
        "Expected HTML fields": list(field_mapping.keys()),
        "Model features": feature_order,
        "Field mapping": field_mapping
    }
    
    if hasattr(model, 'feature_importances_'):
        info["Feature importances"] = {
            name: f"{imp:.4f}" for name, imp in zip(feature_order, model.feature_importances_)
        }
    
    html_output = "<h2>üîß Model Debug Info</h2><pre>"
    for key, value in info.items():
        html_output += f"{key}: {value}\n"
    html_output += "</pre>"
    
    return html_output

@app.route("/test")
def test():
    """Route ƒë·ªÉ test v·ªõi d·ªØ li·ªáu m·∫´u"""
    if model is None:
        return "‚ùå Model not loaded"
    
    # D·ªØ li·ªáu m·∫´u theo format HTML form
    test_cases = [
        {
            "name": "Tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng",
            "data": {"npreg": "1", "glu": "85", "bp": "66", "skin": "29", 
                    "insu": "0", "bmi": "26.6", "ped": "0.351", "age": "31"}
        },
        {
            "name": "Tr∆∞·ªùng h·ª£p c√≥ nguy c∆°",
            "data": {"npreg": "8", "glu": "183", "bp": "64", "skin": "0", 
                    "insu": "0", "bmi": "23.3", "ped": "0.672", "age": "32"}
        }
    ]
    
    html_output = "<h2>üß™ Model Test Cases</h2>"
    
    for case in test_cases:
        html_output += f"<h3>{case['name']}</h3>"
        html_output += f"<p><strong>Input data:</strong> {case['data']}</p>"
        
        try:
            # Convert to features array
            features = []
            for field in ['npreg', 'glu', 'bp', 'skin', 'insu', 'bmi', 'ped', 'age']:
                features.append(float(case['data'][field]))
            
            # Predict
            data = np.array([features])
            prediction = model.predict(data)[0]
            probability = model.predict_proba(data)[0]
            
            result = "C√≥ nguy c∆°" if prediction == 1 else "Kh√¥ng c√≥ nguy c∆°"
            html_output += f"<p><strong>K·∫øt qu·∫£:</strong> {result}</p>"
            html_output += f"<p><strong>X√°c su·∫•t:</strong> [Kh√¥ng: {probability[0]:.3f}, C√≥: {probability[1]:.3f}]</p>"
            
        except Exception as e:
            html_output += f"<p><strong>L·ªói:</strong> {e}</p>"
        
        html_output += "<hr>"
    
    return html_output

if __name__ == "__main__":
    app.run(debug=True)